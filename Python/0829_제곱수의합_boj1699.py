import sys
import math
def dp(N, res):
    
    res[1] = 1
    if N == 1:
        return res[1]

    # 완전제곱수 perfect square num
    PsNum = []
    for i in range(2, N + 1):
        chkNum = int(math.sqrt(i))
        # i가 완전제곱수이면 제곱수 항 1개
        if i == chkNum**2:
            PsNum.append(i)
            res[i] = 1
        # i가 완전제곱수가 아니면
        else:
            # 완전제곱수 리스트에서 최소값을 찾음
            # (ex)12의 경우 -> 12 = 9 + 3, 4 + 8을 비교하게 됨
            for j in range(len(PsNum) - 1, -1, -1):
                res[i] = min(res[i], res[i - PsNum[j]] + res[PsNum[j]])
            # for문에서 찾지 못했으면 res[i]는 아직 maxsize이므로 이전 값 + 1을 하면 됨
            # 1제곱 항을 추가하면 되므로 (이전 값 + 1^2)
            if res[i] == sys.maxsize:
                res[i] = res[i - 1] + 1
    return res[N]

N = int(sys.stdin.readline().rstrip())
res = [sys.maxsize] * (N + 1)
print(dp(N, res))

# 1 1 1^2
# 2 2 1^2 + 1^2
# 3 3 1^2 + 1^2 + 1^2
# 4 1 2^2
# 5 2 2^2 + 1^2
# 6 3 2^2 + 1^2 + 1^2
# 7 4 2^2 + 1^2 + 1^2 + 1^2
# 8 2 2^2 + 2^2
# 9 1 3^2
# 10 2 3^2 + 1^2
# 11 3 3^2 + 1^2 + 1^2
# 12 3 2^2 + 2^2 + 2^2
# 13 4 2^2 + 2^2 + 2^2 + 1^2
# 14 5 2^2 + 2^2 + 2^2 + 1^2 + 1^2
# 15 6 2^2 + 2^2 + 2^2 + 1^2 + 1^2 + 1^2
# 16 1 4^2
# 17 2 16 + 1
# 18 
# ...
# 35 3 25+10 = 5^2 + 3^2 + 1
# 35 2 32+3 = 4^2 + 4^2
# 12 3 9 + 3 = 3^2 + 1^2 + 1^2 + 1^2
# 12 3 2^2 + 2^2 + 2^2
# 1 4 8 9 16 25 27 32 36 49 64 81

# 입력값 100,000이면 316**2 = 99856이 최대 완전제곱수가 된다
# 2 ~ 316
# 완전제곱수를 리스트에 모아놓고 이중for문을 사용해도 100000*316 대략 10000000 = 천만, 10^7 < 1억, 10^8(1초)
# 2초제한 초과하지 않을 것으로 생각..